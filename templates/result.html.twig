{% extends 'base.html.twig' %}
{% block title %}Result{% endblock %}
{% block body_header %}
<header class="">
    <nav>
        <div class="container">
            <ul id="navi">
                <li class="nav-item active"><a class="nav-link" href="{{ path('home') }}">Home</a></li>
                <li class="nav-item active"><a class="nav-link" href="{{ path('forms_completing', {'id':firm.id}) }}">Forms</a></li>
            </ul>
        </div>
    </nav>
</header>
{% endblock %}
{% block body_content %}
<div class="header text">
    <h1>{{ firm.name }}</h1>
    <ul class="main-info">
        <li>
            <p>Sídlo</p>
            <span>{{ firm.sidlo }}</span>
        </li>
        <li>
            <p>Identifikační číslo</p>
            <span>{{ firm.ico }}</span>
        </li>
    </ul>
    <p class="procento">
        <span class="pr">{{ procento }}%</span>
        /
        <span class="pr">100%</span>
    </p>
    <p class="procento">
        <span>Hodnocení: </span>
        <span class="bod">{{ zn }}</span>
    </p>
</div>
<div class="test-result">
    {%  for table in tables %}
    <table>
        <thead>
        <tr>
            <th>
                {{ table.nazev }}
            </th>
            <th>
                Score
            </th>
        </tr>
        </thead>
        <tbody>
        {% for row in table.tests %}
        <tr>
            <td>{{ row.name }}</td>
            <td>{{ row.real }}/{{ row.max }}</td>
        </tr>
        {% endfor %}
        </tbody>
    </table>
{% endfor %}
</div>
<div class="about_mark">
    <h2>Co znamená výsledné hodnocení?</h2>
    <p>{{ popis }}</p>
    <a href="{{ link }}">Více informací o {{ firm.name }}?</a>
</div>
    <script>
        // The debounce function receives our function as a parameter
        const debounce = (fn) => {

            // This holds the requestAnimationFrame reference, so we can cancel it if we wish
            let frame;

            // The debounce function returns a new function that can receive a variable number of arguments
            return (...params) => {

                // If the frame variable has been defined, clear it now, and queue for next frame
                if (frame) {
                    cancelAnimationFrame(frame);
                }

                // Queue our function call for the next frame
                frame = requestAnimationFrame(() => {

                    // Call our function and pass any params we received
                    fn(...params);
                });

            }
        };

        // Reads out the scroll position and stores it in the data attribute
        // so we can use it in our stylesheets
        const storeScroll = () => {
            document.documentElement.dataset.scroll = window.scrollY;
        }
        // Listen for new scroll events, here we debounce our `storeScroll` function
        document.addEventListener('scroll', debounce(storeScroll), { passive: true });
        // Update scroll position for first time
        storeScroll();
    </script>
{% endblock %}